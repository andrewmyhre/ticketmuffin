// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.55
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TicketMuffin.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.55")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Pledging")]
    public partial class PledgingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Pledging.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Pledging", "In order to attend an event\r\nAs a member of the public\r\nI want to pledge to atten" +
                    "d an event", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pledge to attend an event which is not full and sales are open")]
        public virtual void PledgeToAttendAnEventWhichIsNotFullAndSalesAreOpen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pledge to attend an event which is not full and sales are open", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Sales have not ended yet");
#line 8
 testRunner.And("The event is not full");
#line 9
 testRunner.When("I pledge to attend");
#line 10
 testRunner.Then("the pledge should be accepted");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pledge to attend an event which is nearly ready to activate and sales are open")]
        public virtual void PledgeToAttendAnEventWhichIsNearlyReadyToActivateAndSalesAreOpen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pledge to attend an event which is nearly ready to activate and sales are open", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("Sales have not ended yet");
#line 14
 testRunner.And("The event needs one more pledge to be ready to activate");
#line 15
 testRunner.When("I pledge to attend");
#line 16
 testRunner.And("I complete the payment through paypal");
#line 17
 testRunner.Then("the event should be ready to activate");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pledge to attend an event which is full")]
        public virtual void PledgeToAttendAnEventWhichIsFull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pledge to attend an event which is full", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("The event is full");
#line 21
 testRunner.When("I pledge to attend");
#line 22
 testRunner.Then("the pledge should not be accepted with message \"This event is full\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pledge to attend an event for which sales have ended")]
        public virtual void PledgeToAttendAnEventForWhichSalesHaveEnded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pledge to attend an event for which sales have ended", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("Sales have ended");
#line 26
 testRunner.When("I pledge to attend");
#line 27
 testRunner.Then("the pledge should not be accepted with message \"Sales for this event have ended\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pledge to attend an event which doesn\'t have enough spaces left")]
        public virtual void PledgeToAttendAnEventWhichDoesnTHaveEnoughSpacesLeft()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pledge to attend an event which doesn\'t have enough spaces left", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("Sales have not ended yet");
#line 31
 testRunner.And("The event has 2 spaces left");
#line 32
 testRunner.When("I pledge to attend");
#line 33
 testRunner.Then("the pledge should not be accepted with message \"There are only 2 spaces left for " +
                    "this event\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
