@using TicketMuffin.Core.Domain
@model TicketMuffin.Web.Models.EventViewModel

<h2>Pledges for @Model.Title</h2>

<table>
@foreach (var pledge in Model.Pledges)
{
    <tr>
        <td>@pledge.PayPalEmailAddress</td>
        <td>@pledge.DatePledged</td>
        <td>@pledge.Attendees.Count attendees</td>
        <td>@pledge.PaymentStatus</td>
        <td>@pledge.TransactionId</td>
        <td>@if (pledge.PaymentStatus == PaymentStatus.Reconciled)
            {
                <text><span>Paid (sent)</span>
                    <span>@Html.ActionLink("Refund", "refund-pledge", new { id=Model.Id.Substring(Model.Id.IndexOf('/')), orderNumber = pledge.OrderNumber }, null)</span></text>
            }
            else if (pledge.PaymentStatus == TicketMuffin.Core.Domain.PaymentStatus.Refunded)
            {
                <text><span>Refunded</span></text>
                <span>@pledge.DateRefunded.Value.ToString("dd-MM-yyyy hh:mm")</span>
            }
            else if (pledge.PaymentStatus == TicketMuffin.Core.Domain.PaymentStatus.Unpaid)
            {
                <span>Unpaid</span>
            }
            else if (pledge.PaymentStatus == PaymentStatus.PaidPendingReconciliation)
            {
                <text><span>Paid (unsent)</span>
                    <span>@Html.ActionLink("Send payment", "execute-payment", new {id=Model.Id.Substring(Model.Id.IndexOf('/')), orderNumber = pledge.OrderNumber}, null)</span></text>
            } </td>
            @if (pledge.PaymentStatus == PaymentStatus.PaidPendingReconciliation
                || pledge.PaymentStatus == PaymentStatus.Reconciled)
            {
                <td>@Html.ActionLink("Send Tickets", "SendTickets", "Pledge", new {id=pledge.OrderNumber}, null)</td>
            }
        <td>@Html.ActionLink("View messages", "TransactionHistory", 
                new {id = pledge.OrderNumber})</td>
    </tr>
}

</table>